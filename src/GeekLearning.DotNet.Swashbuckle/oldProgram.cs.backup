


namespace GeekLearning.DotNet.Swashbuckle
{
    using Microsoft.DotNet.Cli.Utils;
    using Microsoft.DotNet.InternalAbstractions;
    using Microsoft.DotNet.ProjectModel;
    using Microsoft.Extensions.DependencyInjection;
    using NuGet.Frameworks;
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Threading.Tasks;
    using global::Swashbuckle.Swagger.Model;
    using Microsoft.Extensions.Options;
    using Microsoft.AspNetCore.Mvc;
    using global::Swashbuckle.Swagger.Application;
    using Newtonsoft.Json;
    using Microsoft.Extensions.PlatformAbstractions;
    using Microsoft.AspNetCore.TestHost;
    using Microsoft.AspNetCore.Hosting;
    using System.Reflection;
    using Microsoft.Extensions.DependencyModel;
    using System.Runtime.Loader;

    public class Program
    {
        private static string folderPath;
        private static Dictionary<string, string> knownAssemblies;
        private Dictionary<string, Assembly> loadedAssemblies;

        public static void Main(string[] args)
        {
            Console.WriteLine(string.Join(" ", args));

            var options = CommandLineOptions.Parse(args);

            var project = Create(options.TargetProject ?? Directory.GetCurrentDirectory(), options.Framework);

            var configuration = options.Configuration ?? "Debug";


            var outputPath = project.GetOutputPaths(configuration, /* buildBasePath: */ null, null);

            var isExecutable = project.ProjectFile.GetCompilerOptions(project.TargetFramework, configuration).EmitEntryPoint
                            ?? project.ProjectFile.GetCompilerOptions(null, configuration).EmitEntryPoint.GetValueOrDefault();

            try
            {

                Console.WriteLine(project.TargetFramework);
                Console.WriteLine(PlatformServices.Default.Application.RuntimeFramework.FullName);

                var assemblyPath = isExecutable && (project.IsPortable || options.Framework.IsDesktop())
                    ? outputPath.RuntimeFiles.Executable
                    : outputPath.RuntimeFiles.Assembly;

                Console.WriteLine(project.PackagesDirectory);
                //Console.WriteLine(string.Join("\n", project.LibraryManager.GetLibraries().Select(x => x.Path)));

                //folderPath = outputPath.RuntimeOutputPath;
                //knownAssemblies = new Dictionary<string, string>();

                //var target = project.LockFile.Targets.First(x => x.RuntimeIdentifier == project.RuntimeIdentifier);
                //foreach (var lib in target.Libraries)
                //{
                //    foreach (var runtimeAssembly in lib.RuntimeAssemblies)
                //    {
                //        var fullPath = Path.Combine(project.PackagesDirectory, lib.Name, lib.Version.ToFullString(), runtimeAssembly.Path);
                //        if (fullPath.EndsWith(".dll") && File.Exists(fullPath))
                //        {
                //            knownAssemblies[Path.GetFileNameWithoutExtension(fullPath)] = fullPath;
                //            knownAssemblies[lib.Name] = fullPath;
                //        }
                //    }
                //}

                //AssemblyLoadContext.Default.Resolving += Default_Resolving;

                //foreach (var item in knownAssemblies)
                //{
                //    Console.WriteLine(item.Value);
                //    AssemblyLoadContext.Default.LoadFromAssemblyPath(item.Value);
                //}


                var asl = new AssemblyLoader(outputPath.RuntimeOutputPath, project);

                //foreach (var library in project.LibraryManager.GetLibraries())
                //{

                //    Console.WriteLine(library.Path);
                //    asl.LoadFromAssemblyPath(library.Path);
                //}

                //foreach (var lib in project.LockFile.Targets.First(x => x.RuntimeIdentifier == project.RuntimeIdentifier).Libraries)
                //{
                //    foreach (var asm in lib.RuntimeAssemblies)
                //    {
                //        asl.LoadFromAssemblyPath(new System.Reflection.AssemblyName(Path.GetFileNameWithoutExtension(asm.Path)));
                //    }
                //}

                System.Reflection.Assembly assembly;
                assembly = asl.LoadFromAssemblyPath(assemblyPath);

                //assembly = System.Reflection.Assembly.LoadFile(assemblyPath);
                //#if NET46
                //assembly = System.Reflection.Assembly.LoadFile(assemblyPath);
                //#else
                //#endif




                var startup = assembly.GetTypes().Where(x => x.Name == "Startup").SingleOrDefault();

                Console.WriteLine("Startup : " + startup.FullName);

                //var testServer = new TestServer(new WebHostBuilder()
                //    .UseWebRoot(project.ProjectDirectory)
                //    .UseContentRoot(project.ProjectDirectory)
                //    .UseStartup(startup));

                var toolIServiceCollection = typeof(IServiceCollection);
                Console.WriteLine(toolIServiceCollection.AssemblyQualifiedName);
                var diAss = asl.LoadFromAssemblyName(new AssemblyName("Microsoft.Extensions.DependencyInjection.Abstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60"));
                var type = diAss.GetType("Microsoft.Extensions.DependencyInjection.IServiceCollection");

                Console.ForegroundColor = ConsoleColor.Yellow;

                Console.WriteLine("TypeMatch :" + (type == toolIServiceCollection).ToString());

                Console.ForegroundColor = ConsoleColor.White;

                var servicesMethod = startup.GetMethod("ConfigureServices");
                var parameters = servicesMethod.GetParameters();
                if (parameters.Length > 1 ||
                    parameters.Any(p => p.ParameterType != typeof(IServiceCollection)))
                {
                    Console.WriteLine(typeof(IServiceCollection).IsAssignableFrom(parameters.First().ParameterType));
                    Console.WriteLine(string.Join(",", parameters.Select(x => x.ParameterType.FullName + x.ParameterType.AssemblyQualifiedName)));
                    //throw new InvalidOperationException("snif");
                }


                var hostingAssembly = asl.LoadFromAssemblyName(new AssemblyName("Microsoft.AspNetCore.Hosting, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60"));
                var hostingAbstractionsAssembly = asl.LoadFromAssemblyName(new AssemblyName("Microsoft.AspNetCore.Hosting.Abstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60"));
                var webhostBuilder = (WebHostBuilder)Activator.CreateInstance(hostingAssembly.GetType("Microsoft.AspNetCore.Hosting.WebHostBuilder"));
                //var useStartupMethod = hostingAssembly.GetType("Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions").GetTypeInfo().GetMethods().Where(x => x.Name == "UseStartup" && !x.IsGenericMethod).FirstOrDefault();
                var useStartupMethod = hostingAssembly.GetType("Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions").GetTypeInfo().GetMethods().Where(x => x.Name == "UseStartup" && x.IsGenericMethod).FirstOrDefault();
                var useContentRootMethod = hostingAbstractionsAssembly.GetType("Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions").GetTypeInfo().GetMethods().Where(x => x.Name == "UseContentRoot" && !x.IsGenericMethod).FirstOrDefault();
                var useStartup = (Func<IWebHostBuilder, IWebHostBuilder>)useStartupMethod.MakeGenericMethod(startup).CreateDelegate(typeof(Func<IWebHostBuilder, IWebHostBuilder>));
                //var useStartup = (Func<IWebHostBuilder, System.Type, IWebHostBuilder>)useStartupMethod.CreateDelegate(typeof(Func<IWebHostBuilder, System.Type, IWebHostBuilder>));
                var useContentRoot = (Func<IWebHostBuilder, System.String, IWebHostBuilder>)useContentRootMethod.CreateDelegate(typeof(Func<IWebHostBuilder, System.String, IWebHostBuilder>));

                //var testServer = new TestServer(useStartup(useContentRoot(webhostBuilder, project.ProjectDirectory), startup));

                var server = useStartup(useContentRoot(webhostBuilder, project.ProjectDirectory)).Build();

                //var genericTestEnvironment = typeof(GeekLearning.Test.Integration.Environment.TestEnvironment<,>);
                //var testEnvironmentType = genericTestEnvironment.MakeGenericType(startup, typeof(ConfigurationService));
                //var testEnvironmentType = genericTestEnvironment.MakeGenericType(startup, typeof(GeekLearning.Test.Integration.Environment.DefaultStartupConfigurationService));

                //Console.WriteLine("Trying to instantiate : " + testEnvironmentType.FullName);

                //var testEnvironment = (GeekLearning.Test.Integration.Environment.ITestEnvironment)Activator.CreateInstance(testEnvironmentType);

                Console.WriteLine("Test Environement created");

                //var swaggerProvider = testServer.Host.Services.GetRequiredService<ISwaggerProvider>();
                //var mvcJsonOptions = testServer.Host.Services.GetRequiredService<IOptions<MvcJsonOptions>>();

                //var swaggerSerializer = new JsonSerializer
                //{
                //    NullValueHandling = NullValueHandling.Ignore,
                //    ContractResolver = new SwaggerContractResolver(mvcJsonOptions.Value.SerializerSettings)
                //};

                //var document = swaggerProvider.GetSwagger(options.ApiVersion);

                //using (var fs = new FileStream(options.OutputPath, FileMode.Create, FileAccess.ReadWrite))
                //{
                //    using (var writer = new StreamWriter(fs))
                //    {
                //        swaggerSerializer.Serialize(writer, document);
                //    }
                //}
            }
            catch (System.Reflection.ReflectionTypeLoadException rtle)
            {
                Console.WriteLine(rtle.ToString());
                Console.WriteLine(">>>>>>>>>>>>>>>>");
                foreach (var item in rtle.LoaderExceptions)
                {
                    Console.WriteLine(item.Message);
                    Console.WriteLine(">>>>>>>>>>>>>>>>");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
            //catch (FileLoadException fle)
            //{
            //    //fle.
            //    Console
            //}
        }

        private static Assembly Default_Resolving(System.Runtime.Loader.AssemblyLoadContext aslc, AssemblyName assemblyName)
        {
            var deps = DependencyContext.Default;
            var res = deps.CompileLibraries.Where(d => d.Name.Contains(assemblyName.Name)).ToList();
            if (res.Count > 0)
            {
                return Assembly.Load(new AssemblyName(res.First().Name));
            }
            else
            {
                var apiApplicationFileInfo = new FileInfo($"{folderPath}{Path.DirectorySeparatorChar}{assemblyName.Name}.dll");
                if (File.Exists(apiApplicationFileInfo.FullName))
                {
                    //var asl = new AssemblyLoader(apiApplicationFileInfo.DirectoryName, knownAssemblies);
                    return aslc.LoadFromAssemblyPath(apiApplicationFileInfo.FullName);
                }
                else
                {
                    string path;
                    if (knownAssemblies.TryGetValue(assemblyName.Name, out path))
                    {
                        return aslc.LoadFromAssemblyPath(path);

                    }
                    else
                    {
                        Console.WriteLine("NOT FOUND : " + assemblyName);
                    }
                }
            }
            return Assembly.Load(assemblyName);
        }


        public static ProjectContext Create(string filePath,
          NuGetFramework framework)
        {
            return SelectCompatibleFramework(
                 framework,
                 ProjectContext.CreateContextForEachFramework(filePath,
                     runtimeIdentifiers: RuntimeEnvironmentRidExtensions.GetAllCandidateRuntimeIdentifiers()));
        }

        private static ProjectContext SelectCompatibleFramework(NuGetFramework target, IEnumerable<ProjectContext> contexts)
        {
            return NuGetFrameworkUtility.GetNearest(contexts, target ?? FrameworkConstants.CommonFrameworks.NetCoreApp10, f => f.TargetFramework)
                   ?? contexts.First();
        }
    }
}
